<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xmg.p2p.business.mapper.RechargeOfflineMapper" >
  <resultMap id="BaseResultMap" type="com.xmg.p2p.business.domain.RechargeOffline" >
    <id column="id" property="id"  />
	<result column="amount" property="amount"  />
	<result column="remark" property="remark"  />
	<result column="tradeTime" property="tradeTime"  />
	<result column="auditTime" property="auditTime"  />
	<result column="state" property="state"  />
	<result column="applyTime" property="applyTime"  />
	<result column="note" property="note"  />
	<result column="tradeCode" property="tradeCode"  />
	<association property="applier" javaType="com.xmg.p2p.base.domain.Logininfo" columnPrefix="ap_">
	  <id column="id" property="id"/>
	  <result column="username" property="username"/>
	</association>
	<association property="auditor" javaType="com.xmg.p2p.base.domain.Logininfo" columnPrefix="au_">
	  <id column="id" property="id"/>
	  <result column="username" property="username"/>
	</association>
	<association property="bankInfo" javaType="com.xmg.p2p.business.domain.PlatformBankinfo" columnPrefix="bi_">
	  <id column="id" property="id"/>
	  <result column="accountName" property="accountName"/>
	  <result column="accountNumber" property="accountNumber"/>
	  <result column="bankForkName" property="bankForkName"/>
	  <result column="bankName" property="bankName"/>
	</association>
  </resultMap>
  <insert id="insert" parameterType="com.xmg.p2p.business.domain.RechargeOffline" useGeneratedKeys="true" keyProperty="id" >
    insert into rechargeOffline 
    (amount,bankInfo_id,auditor_id,remark,tradeTime,auditTime,state,applyTime,note,applier_id,tradeCode)
    values 
    (#{amount},#{bankInfo.id},#{auditor.id},#{remark},#{tradeTime},#{auditTime},#{state},#{applyTime},#{note},#{applier.id},#{tradeCode})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.xmg.p2p.business.domain.RechargeOffline" >
    update rechargeOffline
    set
	    amount=#{amount},
	    bankInfo_id=#{bankInfo.id},
	    auditor_id=#{auditor.id},
	    remark=#{remark},
	    tradeTime=#{tradeTime},
	    auditTime=#{auditTime},
	    state=#{state},
	    applyTime=#{applyTime},
	    note=#{note},
	    applier_id=#{applier.id},
	    tradeCode=#{tradeCode}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="long" >
    select ro.id,ro.amount,ro.bankInfo_id,ro.auditor_id,ro.remark,
		   ro.tradeTime,ro.auditTime,ro.state,ro.applyTime,ro.note,ro.applier_id,ro.tradeCode,
			ap.id as ap_id,ap.username as ap_username,
			au.id as au_id,au.username as au_username,
		    bi.id as bi_id,bi.bankName as bi_bankName,bi.accountNumber as bi_accountNumber,
		    bi.bankForkName as bi_bankForkName,bi.accountName as bi_accountName
	from rechargeOffline  ro
	LEFT JOIN logininfo ap on(ro.applier_id=ap.id)
	LEFT JOIN logininfo au on(ro.auditor_id=au.id)
	LEFT JOIN platformbankinfo bi on(ro.bankInfo_id=bi.id)
	where ro.id = #{id}
  </select>
  <sql id="conditionSql">
  	<where>
  	</where>
  </sql>
  <select id="queryPageCount" resultType="long">
  	select count(0) from rechargeOffline ro
  	<include refid="conditionSql"/>
  </select>
  <select id="queryPageData" resultMap="BaseResultMap">
	  select ro.id,ro.amount,ro.bankInfo_id,ro.auditor_id,ro.remark,
	  ro.tradeTime,ro.auditTime,ro.state,ro.applyTime,ro.note,ro.applier_id,ro.tradeCode,
	  ap.id as ap_id,ap.username as ap_username,
	  au.id as au_id,au.username as au_username,
	  bi.id as bi_id,bi.bankName as bi_bankName,bi.accountNumber as bi_accountNumber,
	  bi.bankForkName as bi_bankForkName,bi.accountName as bi_accountName
	  from rechargeOffline  ro
	  LEFT JOIN logininfo ap on(ro.applier_id=ap.id)
	  LEFT JOIN logininfo au on(ro.auditor_id=au.id)
	  LEFT JOIN platformbankinfo bi on(ro.bankInfo_id=bi.id)
  	<include refid="conditionSql"/>
  	limit #{start},#{pageSize}
  </select>
</mapper>